TreeVisitor a System.out.println TV Start TV int Start Tree root boolean ntb int nti MyVisitor v root Tree ntb root Init 16 ntb root Print System.out.println 100000000 ntb root Insert 8 ntb root Insert 24 ntb root Insert 4 ntb root Insert 12 ntb root Insert 20 ntb root Insert 28 ntb root Insert 14 ntb root Print System.out.println 100000000 v MyVisitor System.out.println 50000000 nti root accept v System.out.println 100000000 System.out.println root Search 24 System.out.println root Search 12 System.out.println root Search 16 System.out.println root Search 50 System.out.println root Search 12 ntb root Delete 12 ntb root Print System.out.println root Search 12 0 Tree Tree left Tree right int key boolean has_left boolean has_right Tree my_null boolean Init int v_key key v_key has_left false has_right false true boolean SetRight Tree rn right rn true boolean SetLeft Tree ln left ln true Tree GetRight right Tree GetLeft left int GetKey key boolean SetKey int v_key key v_key true boolean GetHas_Right has_right boolean GetHas_Left has_left boolean SetHas_Left boolean val has_left val true boolean SetHas_Right boolean val has_right val true boolean Compare int num1 int num2 boolean ntb int nti ntb false nti num2 + 1 if num1 < num2 ntb false if ! num1 < nti ntb false ntb true ntb boolean Insert int v_key Tree new_node boolean ntb Tree current_node boolean cont int key_aux new_node Tree ntb new_node Init v_key current_node this cont true while cont { key_aux current_node GetKey if v_key < key_aux { if current_node GetHas_Left current_node current_node GetLeft { cont false ntb current_node SetHas_Left true ntb current_node SetLeft new_node { if current_node GetHas_Right current_node current_node GetRight { cont false ntb current_node SetHas_Right true ntb current_node SetRight new_node true boolean Delete int v_key Tree current_node Tree parent_node boolean cont boolean found boolean ntb boolean is_root int key_aux current_node this parent_node this cont true found false is_root true while cont { key_aux current_node GetKey if v_key < key_aux if current_node GetHas_Left { parent_node current_node current_node current_node GetLeft cont false if key_aux < v_key if current_node GetHas_Right { parent_node current_node current_node current_node GetRight cont false { if is_root if ! current_node GetHas_Right && ! current_node GetHas_Left ntb true ntb this Remove parent_node current_node ntb this Remove parent_node current_node found true cont false is_root false found boolean Remove Tree p_node Tree c_node boolean ntb int auxkey1 int auxkey2 if c_node GetHas_Left ntb this RemoveLeft p_node c_node if c_node GetHas_Right ntb this RemoveRight p_node c_node { auxkey1 c_node GetKey auxkey2 p_node GetLeft GetKey if this Compare auxkey1 auxkey2 { ntb p_node SetLeft my_null ntb p_node SetHas_Left false { ntb p_node SetRight my_null ntb p_node SetHas_Right false true boolean RemoveRight Tree p_node Tree c_node boolean ntb while c_node GetHas_Right { ntb c_node SetKey c_node GetRight GetKey p_node c_node c_node c_node GetRight ntb p_node SetRight my_null ntb p_node SetHas_Right false true boolean RemoveLeft Tree p_node Tree c_node boolean ntb while c_node GetHas_Left { ntb c_node SetKey c_node GetLeft GetKey p_node c_node c_node c_node GetLeft ntb p_node SetLeft my_null ntb p_node SetHas_Left false true int Search int v_key Tree current_node int ifound boolean cont int key_aux current_node this cont true ifound 0 while cont { key_aux current_node GetKey if v_key < key_aux if current_node GetHas_Left current_node current_node GetLeft cont false if key_aux < v_key if current_node GetHas_Right current_node current_node GetRight cont false { ifound 1 cont false ifound boolean Print boolean ntb Tree current_node current_node this ntb this RecPrint current_node true boolean RecPrint Tree node boolean ntb if node GetHas_Left { ntb this RecPrint node GetLeft ntb true System.out.println node GetKey if node GetHas_Right { ntb this RecPrint node GetRight ntb true true int accept Visitor v int nti System.out.println 333 nti v visit this 0 Visitor Tree l Tree r int visit Tree n int nti if n GetHas_Right { r n GetRight nti r accept this nti 0 if n GetHas_Left { l n GetLeft nti l accept this nti 0 0 MyVisitor Visitor int visit Tree n int nti if n GetHas_Right { r n GetRight nti r accept this nti 0 System.out.println n GetKey if n GetHas_Left { l n GetLeft nti l accept this nti 0 0  
