/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import java.util.*;
import minijava.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    public void caseAMainClass(AMainClass node)
    {
        defaultCase(node);
    }

    public void caseAClassDecl(AClassDecl node)
    {
        defaultCase(node);
    }

    public void caseAFormal(AFormal node)
    {
        defaultCase(node);
    }

    public void caseAVarDecl(AVarDecl node)
    {
        defaultCase(node);
    }

    public void caseAMethodDecl(AMethodDecl node)
    {
        defaultCase(node);
    }

    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }

    public void caseAArrayAssignStatement(AArrayAssignStatement node)
    {
        defaultCase(node);
    }

    public void caseAAssignStatement(AAssignStatement node)
    {
        defaultCase(node);
    }

    public void caseAWhileStatement(AWhileStatement node)
    {
        defaultCase(node);
    }

    public void caseAPrintStatement(APrintStatement node)
    {
        defaultCase(node);
    }

    public void caseABlockStatement(ABlockStatement node)
    {
        defaultCase(node);
    }

    public void caseACallExp(ACallExp node)
    {
        defaultCase(node);
    }

    public void caseAPlusExp(APlusExp node)
    {
        defaultCase(node);
    }

    public void caseAMinusExp(AMinusExp node)
    {
        defaultCase(node);
    }

    public void caseATimesExp(ATimesExp node)
    {
        defaultCase(node);
    }

    public void caseAAndExp(AAndExp node)
    {
        defaultCase(node);
    }

    public void caseAOrExp(AOrExp node)
    {
        defaultCase(node);
    }

    public void caseAGthanExp(AGthanExp node)
    {
        defaultCase(node);
    }

    public void caseAGeExp(AGeExp node)
    {
        defaultCase(node);
    }

    public void caseALthanExp(ALthanExp node)
    {
        defaultCase(node);
    }

    public void caseALessThanExp(ALessThanExp node)
    {
        defaultCase(node);
    }

    public void caseAEqualExp(AEqualExp node)
    {
        defaultCase(node);
    }

    public void caseANoteqExp(ANoteqExp node)
    {
        defaultCase(node);
    }

    public void caseAArrayLookupExp(AArrayLookupExp node)
    {
        defaultCase(node);
    }

    public void caseAArrayLengthExp(AArrayLengthExp node)
    {
        defaultCase(node);
    }

    public void caseANotExp(ANotExp node)
    {
        defaultCase(node);
    }

    public void caseANewArrayExp(ANewArrayExp node)
    {
        defaultCase(node);
    }

    public void caseAIdentifierExp(AIdentifierExp node)
    {
        defaultCase(node);
    }

    public void caseANewObjectExp(ANewObjectExp node)
    {
        defaultCase(node);
    }

    public void caseAIntegerLiteralExp(AIntegerLiteralExp node)
    {
        defaultCase(node);
    }

    public void caseATrueExp(ATrueExp node)
    {
        defaultCase(node);
    }

    public void caseAFalseExp(AFalseExp node)
    {
        defaultCase(node);
    }

    public void caseAThisExp(AThisExp node)
    {
        defaultCase(node);
    }

    public void caseAIntType(AIntType node)
    {
        defaultCase(node);
    }

    public void caseAArrayType(AArrayType node)
    {
        defaultCase(node);
    }

    public void caseABooleanType(ABooleanType node)
    {
        defaultCase(node);
    }

    public void caseAObjectType(AObjectType node)
    {
        defaultCase(node);
    }

    public void caseTTokInt(TTokInt node)
    {
        defaultCase(node);
    }

    public void caseTTokBoolean(TTokBoolean node)
    {
        defaultCase(node);
    }

    public void caseTTokClass(TTokClass node)
    {
        defaultCase(node);
    }

    public void caseTTokPublic(TTokPublic node)
    {
        defaultCase(node);
    }

    public void caseTTokExtends(TTokExtends node)
    {
        defaultCase(node);
    }

    public void caseTTokIf(TTokIf node)
    {
        defaultCase(node);
    }

    public void caseTTokWhile(TTokWhile node)
    {
        defaultCase(node);
    }

    public void caseTTokElse(TTokElse node)
    {
        defaultCase(node);
    }

    public void caseTTokReturn(TTokReturn node)
    {
        defaultCase(node);
    }

    public void caseTTokTrue(TTokTrue node)
    {
        defaultCase(node);
    }

    public void caseTTokFalse(TTokFalse node)
    {
        defaultCase(node);
    }

    public void caseTTokThis(TTokThis node)
    {
        defaultCase(node);
    }

    public void caseTTokNew(TTokNew node)
    {
        defaultCase(node);
    }

    public void caseTTokLength(TTokLength node)
    {
        defaultCase(node);
    }

    public void caseTTokString(TTokString node)
    {
        defaultCase(node);
    }

    public void caseTTokPrint(TTokPrint node)
    {
        defaultCase(node);
    }

    public void caseTTokStatic(TTokStatic node)
    {
        defaultCase(node);
    }

    public void caseTTokVoid(TTokVoid node)
    {
        defaultCase(node);
    }

    public void caseTTokMain(TTokMain node)
    {
        defaultCase(node);
    }

    public void caseTTokNull(TTokNull node)
    {
        defaultCase(node);
    }

    public void caseTLBrack(TLBrack node)
    {
        defaultCase(node);
    }

    public void caseTRBrack(TRBrack node)
    {
        defaultCase(node);
    }

    public void caseTLParen(TLParen node)
    {
        defaultCase(node);
    }

    public void caseTRParen(TRParen node)
    {
        defaultCase(node);
    }

    public void caseTLBrace(TLBrace node)
    {
        defaultCase(node);
    }

    public void caseTRBrace(TRBrace node)
    {
        defaultCase(node);
    }

    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    public void caseTSemi(TSemi node)
    {
        defaultCase(node);
    }

    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    public void caseTTimes(TTimes node)
    {
        defaultCase(node);
    }

    public void caseTGt(TGt node)
    {
        defaultCase(node);
    }

    public void caseTLt(TLt node)
    {
        defaultCase(node);
    }

    public void caseTGe(TGe node)
    {
        defaultCase(node);
    }

    public void caseTLe(TLe node)
    {
        defaultCase(node);
    }

    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    public void caseTEq(TEq node)
    {
        defaultCase(node);
    }

    public void caseTNeq(TNeq node)
    {
        defaultCase(node);
    }

    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    public void caseTBe(TBe node)
    {
        defaultCase(node);
    }

    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTBlockComment(TBlockComment node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
