/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import java.util.*;
import minijava.analysis.*;

@SuppressWarnings("nls")
public final class ANewArrayExp extends PExp
{
    private TTokNew _token_;
    private PExp _size_;
    private final LinkedList<PExp> _i_ = new LinkedList<PExp>();

    public ANewArrayExp()
    {
        // Constructor
    }

    public ANewArrayExp(
        @SuppressWarnings("hiding") TTokNew _token_,
        @SuppressWarnings("hiding") PExp _size_,
        @SuppressWarnings("hiding") List<PExp> _i_)
    {
        // Constructor
        setToken(_token_);

        setSize(_size_);

        setI(_i_);

    }

    @Override
    public Object clone()
    {
        return new ANewArrayExp(
            cloneNode(this._token_),
            cloneNode(this._size_),
            cloneList(this._i_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANewArrayExp(this);
    }

    public TTokNew getToken()
    {
        return this._token_;
    }

    public void setToken(TTokNew node)
    {
        if(this._token_ != null)
        {
            this._token_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._token_ = node;
    }

    public PExp getSize()
    {
        return this._size_;
    }

    public void setSize(PExp node)
    {
        if(this._size_ != null)
        {
            this._size_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._size_ = node;
    }

    public LinkedList<PExp> getI()
    {
        return this._i_;
    }

    public void setI(List<PExp> list)
    {
        this._i_.clear();
        this._i_.addAll(list);
        for(PExp e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._token_)
            + toString(this._size_)
            + toString(this._i_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._token_ == child)
        {
            this._token_ = null;
            return;
        }

        if(this._size_ == child)
        {
            this._size_ = null;
            return;
        }

        if(this._i_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._token_ == oldChild)
        {
            setToken((TTokNew) newChild);
            return;
        }

        if(this._size_ == oldChild)
        {
            setSize((PExp) newChild);
            return;
        }

        for(ListIterator<PExp> i = this._i_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExp) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
