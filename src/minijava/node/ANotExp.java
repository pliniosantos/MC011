/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class ANotExp extends PExp
{
    private TNot _token_;
    private PExp _value_;

    public ANotExp()
    {
        // Constructor
    }

    public ANotExp(
        @SuppressWarnings("hiding") TNot _token_,
        @SuppressWarnings("hiding") PExp _value_)
    {
        // Constructor
        setToken(_token_);

        setValue(_value_);

    }

    @Override
    public Object clone()
    {
        return new ANotExp(
            cloneNode(this._token_),
            cloneNode(this._value_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotExp(this);
    }

    public TNot getToken()
    {
        return this._token_;
    }

    public void setToken(TNot node)
    {
        if(this._token_ != null)
        {
            this._token_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._token_ = node;
    }

    public PExp getValue()
    {
        return this._value_;
    }

    public void setValue(PExp node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._token_)
            + toString(this._value_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._token_ == child)
        {
            this._token_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._token_ == oldChild)
        {
            setToken((TNot) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
