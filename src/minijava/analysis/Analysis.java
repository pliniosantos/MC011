/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.analysis;

import minijava.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAMainClass(AMainClass node);
    void caseAClassDecl(AClassDecl node);
    void caseAFormal(AFormal node);
    void caseAVarDecl(AVarDecl node);
    void caseAMethodDecl(AMethodDecl node);
    void caseAIfStatement(AIfStatement node);
    void caseAArrayAssignStatement(AArrayAssignStatement node);
    void caseAAssignStatement(AAssignStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseAPrintStatement(APrintStatement node);
    void caseABlockStatement(ABlockStatement node);
    void caseACallExp(ACallExp node);
    void caseAPlusExp(APlusExp node);
    void caseAMinusExp(AMinusExp node);
    void caseATimesExp(ATimesExp node);
    void caseAAndExp(AAndExp node);
    void caseAOrExp(AOrExp node);
    void caseAGthanExp(AGthanExp node);
    void caseAGeExp(AGeExp node);
    void caseALthanExp(ALthanExp node);
    void caseALessThanExp(ALessThanExp node);
    void caseAEqualExp(AEqualExp node);
    void caseANoteqExp(ANoteqExp node);
    void caseAArrayLookupExp(AArrayLookupExp node);
    void caseAArrayLengthExp(AArrayLengthExp node);
    void caseANotExp(ANotExp node);
    void caseANewArrayExp(ANewArrayExp node);
    void caseAIdentifierExp(AIdentifierExp node);
    void caseANewObjectExp(ANewObjectExp node);
    void caseAIntegerLiteralExp(AIntegerLiteralExp node);
    void caseATrueExp(ATrueExp node);
    void caseAFalseExp(AFalseExp node);
    void caseAThisExp(AThisExp node);
    void caseAIntType(AIntType node);
    void caseAArrayType(AArrayType node);
    void caseABooleanType(ABooleanType node);
    void caseAObjectType(AObjectType node);

    void caseTTokInt(TTokInt node);
    void caseTTokBoolean(TTokBoolean node);
    void caseTTokClass(TTokClass node);
    void caseTTokPublic(TTokPublic node);
    void caseTTokExtends(TTokExtends node);
    void caseTTokIf(TTokIf node);
    void caseTTokWhile(TTokWhile node);
    void caseTTokElse(TTokElse node);
    void caseTTokReturn(TTokReturn node);
    void caseTTokTrue(TTokTrue node);
    void caseTTokFalse(TTokFalse node);
    void caseTTokThis(TTokThis node);
    void caseTTokNew(TTokNew node);
    void caseTTokLength(TTokLength node);
    void caseTTokString(TTokString node);
    void caseTTokPrint(TTokPrint node);
    void caseTTokStatic(TTokStatic node);
    void caseTTokVoid(TTokVoid node);
    void caseTTokMain(TTokMain node);
    void caseTTokNull(TTokNull node);
    void caseTLBrack(TLBrack node);
    void caseTRBrack(TRBrack node);
    void caseTLParen(TLParen node);
    void caseTRParen(TRParen node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTSemi(TSemi node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTTimes(TTimes node);
    void caseTGt(TGt node);
    void caseTLt(TLt node);
    void caseTGe(TGe node);
    void caseTLe(TLe node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTEq(TEq node);
    void caseTNeq(TNeq node);
    void caseTNot(TNot node);
    void caseTBe(TBe node);
    void caseTId(TId node);
    void caseTNumber(TNumber node);
    void caseTWhiteSpace(TWhiteSpace node);
    void caseTBlockComment(TBlockComment node);
    void caseEOF(EOF node);
}
