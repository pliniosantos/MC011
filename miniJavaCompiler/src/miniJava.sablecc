Package minijava;

Helpers
	tab          		= 9;
	lf           		= 10;
	cr           		= 13;
	decimal        		= ['0' .. '9'];
	character     		= [['a' .. 'z'] + ['A' .. 'Z']];
	anychar      		= [0x0 .. 0xfff];
	line_terminator 	= cr lf | cr | lf;
	white_space     	= tab | ' ';
	without_star    	= [anychar - '*'];
	without_star_slash  = [without_star - '/'];
	linecomment  		= '//' [anychar - [cr + lf]]* line_terminator?;
    blockcomment 		= '/*' without_star* '*'+ (without_star_slash without_star* '*'+)* '/';

Tokens
	// Identificadores
    intt    = 'int';
    intv    = 'int' white_space* '[' white_space* ']';
    bool    = 'boolean';
    classtk = 'class';
    public  = 'public';
    extends = 'extends';
    if      = 'if';
    while   = 'while';
    else    = 'else';
    return  = 'return';
    true    = 'true';
    false   = 'false';
    this    = 'this';
    new     = 'new';
    length  = 'length';
    string  = 'String';
    print   = 'System.out.println';
    static  = 'static';
    void    = 'void';
    main    = 'main';

	// Simbolos
    lbrace = '[';
    rbrace = ']';
    lparen = '(';
    rparen = ')';
    lcurbr = '{';
    rcurbr = '}';
    dot    = '.';
    comma  = ',';
    semi   = ';';

    plus  = '+';
    minus = '-';
    times = '*';
    gthan = '>';
    lthan = '<';
    ge    = '>=';
    le    = '<=';
    and   = '&&';
    or    = '||';
    loeq  = '==';
    neg   = '!';
    be    = '=';

	// Outros
    id     = character (character | decimal | '_')*;
    number = '0' | ([decimal - '0'] decimal*);

	// Ignorados
    blank   = (white_space | line_terminator)+;
    comment = linecomment | blockcomment;
   
Ignored Tokens
	blank, comment;


Productions
    program { -> program }
        = mainclass classdecl
            { -> New program(mainclass, [classdecl.nextclass]) };

    mainclass { -> mainclass }
        = classtk [name]:id [op]:lcurbr public static void main lparen string lbrace rbrace [arg]:id rparen [os]:lcurbr statementlist [cp]:rcurbr [cs]:rcurbr
            { -> New mainclass(name, arg, [statementlist.statement]) };

    classdecl { -> nextclass* }
        = {ext} classtk [cname]:id extends [ename]:id lcurbr vardecl methoddecl rcurbr classdecl
            { -> [New nextclass.ext(cname, ename, [vardecl.var], [methoddecl.method]), classdecl.nextclass] }
        | {nonext} classtk id lcurbr vardecl methoddecl rcurbr classdecl
            { -> [New nextclass.nonext(id, [vardecl.var], [methoddecl.method]), classdecl.nextclass] }
        | {empty}
        	{ -> [] };
  
    vardecl { -> var* }
        = {nonempty} vardecl type id semi
            { -> [vardecl.var, New var(type, id)] }
        | {empty}
        	{ -> [] };

    methoddecl { -> method* }
        = {nonempty} public type id lparen formallist rparen lcurbr vardecl statementlist return expr semi rcurbr methoddecl
            { -> [New method(type, id, [formallist.var], [vardecl.var], [statementlist.statement], expr.expression), methoddecl.method] }
        | {empty}
        	{ -> [] };

    formallist { -> var* }
        = {nonempty} type id formalrest
            { -> [New var(type, id), formalrest.var] }
        | {empty}
        	{ -> [] };

    formalrest { -> var* }
        = {remainder} comma type id formalrest
            { -> [New var(type, id), formalrest.var] }
        | {empty}
        	{ -> [] };
    
    statementlist { -> statement* }
    	= {nonempty} statement statementlist
    		{ -> [statement, statementlist.statement] }
    	| {empty}
    		{ -> [] };

    statement { -> statement }
		= {open} statement1
			{ -> statement1.statement }
		| {closed} statement2
			{ -> statement2.statement };

    statement1 { -> statement }
        = {if}  if lparen expr rparen statement
            { -> New statement.if(expr.expression, statement) }
        | {ifelse}  if lparen expr rparen [i]:statement2 else [e]:statement1
            { -> New statement.ifelse(expr.expression, i.statement, e.statement) }
        | {while}   while lparen expr rparen statement1
            { -> New statement.while(expr.expression, statement1.statement) };
            
    statement2 { -> statement }
        = {nested}  lcurbr statementlist rcurbr
            { -> New statement.many([statementlist.statement]) }
        | {ifelse}  if lparen expr rparen [i]:statement2 else [e]:statement2
            { -> New statement.ifelse(expr.expression, i.statement, e.statement) }
        | {while}   while lparen expr rparen statement2
            { -> New statement.while(expr.expression, statement2.statement) }
        | {print}   print lparen expr rparen semi
            { -> New statement.print(expr.expression) }
        | {assign}  id be expr semi
            { -> New statement.atb(id, expr.expression) }
        | {vassign} id lbrace [i]:expr rbrace be [v]:expr semi
            { -> New statement.vatb(id, i.expression, v.expression) };
		            
    type
        = {intt}  intt
			{ -> New type.intt(intt) }
        | {intv}  intv
			{ -> New type.intv(intv) }
        | {bool}  bool
			{ -> New type.bool(bool) }
        | {class} id
			{ -> New type.class(id) };

	noarrayexpr { -> expression }
        = {name}    id
        	{ -> New expression.var(id) }
		| {literal} number
            { -> New expression.number(number) }
        | {true}    true
            { -> New expression.btrue(true) }
        | {false}   false
            { -> New expression.bfalse(false) }
        | {self}    this
            { -> New expression.self(this) }
		| {parexp}  lparen expr rparen
        	{ -> expr.expression }
        | {vaccess} noarrayexpr lbrace expr rbrace 
            { -> New expression.vector(noarrayexpr.expression, expr.expression) }
        | {length}  primaryexpr dot length
            { -> New expression.length(primaryexpr.expression) }
        | {maccess} primaryexpr dot id lparen exprlist rparen
            { -> New expression.mcall(primaryexpr.expression, id, [exprlist.expression]) }
        | {newc} new id lparen rparen
            { -> New expression.newobj(id) };

	primaryexpr { -> expression }
		= {newarr} new intt lbrace expr rbrace matrixaccess
            { -> New expression.newvec(expr.expression, [matrixaccess.expression]) }
		| {next}   noarrayexpr
			{ -> noarrayexpr.expression };
			
	matrixaccess { -> expression* }
		= {nonempty} lbrace expr rbrace matrixaccess
			{ -> [expr.expression, matrixaccess.expression] }
		| {empty}
        	{ -> [] }; 
        	
	unaryexpr { -> expression }
    	= {not}  neg unaryexpr
    		{ -> New expression.not(unaryexpr.expression) }
    	| {next} primaryexpr
    		{ -> primaryexpr.expression };
    		
    ipexpr { -> expression }
        = {mult} ipexpr times unaryexpr
            { -> New expression.mult(ipexpr.expression, unaryexpr.expression) }
        | {next} unaryexpr
            { -> unaryexpr.expression };

    iaexpr { -> expression }
        = {plus}  iaexpr plus ipexpr
            { -> New expression.plus(iaexpr.expression, ipexpr.expression) }
        | {minus} iaexpr minus ipexpr
            { -> New expression.minus(iaexpr.expression, ipexpr.expression) }
        | {next}  ipexpr
            { -> ipexpr.expression };

    bexpr { -> expression }
        = {greater} bexpr gthan iaexpr
            { -> New expression.gthan(bexpr.expression, iaexpr.expression) }
        | {ge} bexpr ge iaexpr
            { -> New expression.ge(bexpr.expression, iaexpr.expression) }
        | {less}    bexpr lthan iaexpr
            { -> New expression.lthan(bexpr.expression, iaexpr.expression) }
        | {le}    bexpr le iaexpr
            { -> New expression.le(bexpr.expression, iaexpr.expression) }
        | {next}    iaexpr
            { -> iaexpr.expression };

    expr { -> expression }
        = {and}  expr and bexpr
            { -> New expression.and(expr.expression, bexpr.expression) }
        | {or}   expr or bexpr
            { -> New expression.or(expr.expression, bexpr.expression) }
        | {logicalequal} expr loeq bexpr
            { -> New expression.loeq(expr.expression, bexpr.expression) }
        | {next} bexpr
            { -> bexpr.expression };

    exprlist { -> expression* }
        = {nonempty} expr exprrest
            { -> [expr.expression, exprrest.expression] }
        | {empty}
        	{ -> [] };

    exprrest { -> expression* }
        = {remainder} comma expr exprrest
            { -> [expr.expression, exprrest.expression] }
        | {empty}
        	{ -> [] };


Abstract Syntax Tree
    program
        = mainclass nextclass*;

    mainclass
        = [cn]:id [an]:id statement*;

    nextclass
        = {ext}    [name]:id [ext]:id var* method*
        | {nonext} id var* method*;

    var
       = type id;

    method
        = type id [param]:var* [local]:var* statement* expression;

    statement
        = {ifelse}    expression [i]:statement [e]:statement
        | {if}    expression statement
        | {vatb}  id [i]:expression [v]:expression
        | {atb}   id expression
        | {while} expression statement
        | {print} expression
        | {many}  statement*;

    expression
        = {mcall}  [obj]:expression id [par]:expression*
        | {plus}   [l]:expression [r]:expression
        | {minus}  [l]:expression [r]:expression
        | {mult}   [l]:expression [r]:expression
        | {and}    [l]:expression [r]:expression
        | {or}     [l]:expression [r]:expression
        | {gthan}  [l]:expression [r]:expression
        | {ge}     [l]:expression [r]:expression
        | {lthan}  [l]:expression [r]:expression
        | {le}     [l]:expression [r]:expression
        | {loeq}   [l]:expression [r]:expression
        | {vector} [l]:expression [e]:expression
        | {length} expression
        | {not}    expression
        | {newvec} [l]:expression [i]:expression*
        | {var}    id
        | {newobj} id
        | {number} number
        | {btrue}  true
        | {bfalse} false
        | {self}   this;
    
    type
        = {intt}  intt
        | {intv}  intv
        | {bool}  bool
        | {class} id;