/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import java.util.*;
import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AExtendClassdecl extends PClassdecl
{
    private TClasse _classe_;
    private TId _filho_;
    private TExtends _extends_;
    private TId _pai_;
    private TLbra _c3_;
    private final LinkedList<PVardecl> _vardecl_ = new LinkedList<PVardecl>();
    private final LinkedList<PMethoddecl> _methoddecl_ = new LinkedList<PMethoddecl>();
    private TRbra _c4_;

    public AExtendClassdecl()
    {
        // Constructor
    }

    public AExtendClassdecl(
        @SuppressWarnings("hiding") TClasse _classe_,
        @SuppressWarnings("hiding") TId _filho_,
        @SuppressWarnings("hiding") TExtends _extends_,
        @SuppressWarnings("hiding") TId _pai_,
        @SuppressWarnings("hiding") TLbra _c3_,
        @SuppressWarnings("hiding") List<PVardecl> _vardecl_,
        @SuppressWarnings("hiding") List<PMethoddecl> _methoddecl_,
        @SuppressWarnings("hiding") TRbra _c4_)
    {
        // Constructor
        setClasse(_classe_);

        setFilho(_filho_);

        setExtends(_extends_);

        setPai(_pai_);

        setC3(_c3_);

        setVardecl(_vardecl_);

        setMethoddecl(_methoddecl_);

        setC4(_c4_);

    }

    @Override
    public Object clone()
    {
        return new AExtendClassdecl(
            cloneNode(this._classe_),
            cloneNode(this._filho_),
            cloneNode(this._extends_),
            cloneNode(this._pai_),
            cloneNode(this._c3_),
            cloneList(this._vardecl_),
            cloneList(this._methoddecl_),
            cloneNode(this._c4_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExtendClassdecl(this);
    }

    public TClasse getClasse()
    {
        return this._classe_;
    }

    public void setClasse(TClasse node)
    {
        if(this._classe_ != null)
        {
            this._classe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classe_ = node;
    }

    public TId getFilho()
    {
        return this._filho_;
    }

    public void setFilho(TId node)
    {
        if(this._filho_ != null)
        {
            this._filho_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._filho_ = node;
    }

    public TExtends getExtends()
    {
        return this._extends_;
    }

    public void setExtends(TExtends node)
    {
        if(this._extends_ != null)
        {
            this._extends_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._extends_ = node;
    }

    public TId getPai()
    {
        return this._pai_;
    }

    public void setPai(TId node)
    {
        if(this._pai_ != null)
        {
            this._pai_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pai_ = node;
    }

    public TLbra getC3()
    {
        return this._c3_;
    }

    public void setC3(TLbra node)
    {
        if(this._c3_ != null)
        {
            this._c3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c3_ = node;
    }

    public LinkedList<PVardecl> getVardecl()
    {
        return this._vardecl_;
    }

    public void setVardecl(List<PVardecl> list)
    {
        this._vardecl_.clear();
        this._vardecl_.addAll(list);
        for(PVardecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PMethoddecl> getMethoddecl()
    {
        return this._methoddecl_;
    }

    public void setMethoddecl(List<PMethoddecl> list)
    {
        this._methoddecl_.clear();
        this._methoddecl_.addAll(list);
        for(PMethoddecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRbra getC4()
    {
        return this._c4_;
    }

    public void setC4(TRbra node)
    {
        if(this._c4_ != null)
        {
            this._c4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c4_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classe_)
            + toString(this._filho_)
            + toString(this._extends_)
            + toString(this._pai_)
            + toString(this._c3_)
            + toString(this._vardecl_)
            + toString(this._methoddecl_)
            + toString(this._c4_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classe_ == child)
        {
            this._classe_ = null;
            return;
        }

        if(this._filho_ == child)
        {
            this._filho_ = null;
            return;
        }

        if(this._extends_ == child)
        {
            this._extends_ = null;
            return;
        }

        if(this._pai_ == child)
        {
            this._pai_ = null;
            return;
        }

        if(this._c3_ == child)
        {
            this._c3_ = null;
            return;
        }

        if(this._vardecl_.remove(child))
        {
            return;
        }

        if(this._methoddecl_.remove(child))
        {
            return;
        }

        if(this._c4_ == child)
        {
            this._c4_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classe_ == oldChild)
        {
            setClasse((TClasse) newChild);
            return;
        }

        if(this._filho_ == oldChild)
        {
            setFilho((TId) newChild);
            return;
        }

        if(this._extends_ == oldChild)
        {
            setExtends((TExtends) newChild);
            return;
        }

        if(this._pai_ == oldChild)
        {
            setPai((TId) newChild);
            return;
        }

        if(this._c3_ == oldChild)
        {
            setC3((TLbra) newChild);
            return;
        }

        for(ListIterator<PVardecl> i = this._vardecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVardecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethoddecl> i = this._methoddecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethoddecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._c4_ == oldChild)
        {
            setC4((TRbra) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
