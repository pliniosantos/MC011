/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AParexpExp2 extends PExp2
{
    private TLpar _par3_;
    private PExp _parExp_;
    private TRpar _par4_;

    public AParexpExp2()
    {
        // Constructor
    }

    public AParexpExp2(
        @SuppressWarnings("hiding") TLpar _par3_,
        @SuppressWarnings("hiding") PExp _parExp_,
        @SuppressWarnings("hiding") TRpar _par4_)
    {
        // Constructor
        setPar3(_par3_);

        setParExp(_parExp_);

        setPar4(_par4_);

    }

    @Override
    public Object clone()
    {
        return new AParexpExp2(
            cloneNode(this._par3_),
            cloneNode(this._parExp_),
            cloneNode(this._par4_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParexpExp2(this);
    }

    public TLpar getPar3()
    {
        return this._par3_;
    }

    public void setPar3(TLpar node)
    {
        if(this._par3_ != null)
        {
            this._par3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._par3_ = node;
    }

    public PExp getParExp()
    {
        return this._parExp_;
    }

    public void setParExp(PExp node)
    {
        if(this._parExp_ != null)
        {
            this._parExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parExp_ = node;
    }

    public TRpar getPar4()
    {
        return this._par4_;
    }

    public void setPar4(TRpar node)
    {
        if(this._par4_ != null)
        {
            this._par4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._par4_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._par3_)
            + toString(this._parExp_)
            + toString(this._par4_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._par3_ == child)
        {
            this._par3_ = null;
            return;
        }

        if(this._parExp_ == child)
        {
            this._parExp_ = null;
            return;
        }

        if(this._par4_ == child)
        {
            this._par4_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._par3_ == oldChild)
        {
            setPar3((TLpar) newChild);
            return;
        }

        if(this._parExp_ == oldChild)
        {
            setParExp((PExp) newChild);
            return;
        }

        if(this._par4_ == oldChild)
        {
            setPar4((TRpar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
