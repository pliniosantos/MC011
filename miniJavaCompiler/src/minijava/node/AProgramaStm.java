/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import java.util.*;
import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AProgramaStm extends PStm
{
    private TLbra _lbra_;
    private final LinkedList<PStm> _stm_ = new LinkedList<PStm>();
    private TRbra _rbra_;

    public AProgramaStm()
    {
        // Constructor
    }

    public AProgramaStm(
        @SuppressWarnings("hiding") TLbra _lbra_,
        @SuppressWarnings("hiding") List<PStm> _stm_,
        @SuppressWarnings("hiding") TRbra _rbra_)
    {
        // Constructor
        setLbra(_lbra_);

        setStm(_stm_);

        setRbra(_rbra_);

    }

    @Override
    public Object clone()
    {
        return new AProgramaStm(
            cloneNode(this._lbra_),
            cloneList(this._stm_),
            cloneNode(this._rbra_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgramaStm(this);
    }

    public TLbra getLbra()
    {
        return this._lbra_;
    }

    public void setLbra(TLbra node)
    {
        if(this._lbra_ != null)
        {
            this._lbra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lbra_ = node;
    }

    public LinkedList<PStm> getStm()
    {
        return this._stm_;
    }

    public void setStm(List<PStm> list)
    {
        this._stm_.clear();
        this._stm_.addAll(list);
        for(PStm e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRbra getRbra()
    {
        return this._rbra_;
    }

    public void setRbra(TRbra node)
    {
        if(this._rbra_ != null)
        {
            this._rbra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rbra_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lbra_)
            + toString(this._stm_)
            + toString(this._rbra_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lbra_ == child)
        {
            this._lbra_ = null;
            return;
        }

        if(this._stm_.remove(child))
        {
            return;
        }

        if(this._rbra_ == child)
        {
            this._rbra_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lbra_ == oldChild)
        {
            setLbra((TLbra) newChild);
            return;
        }

        for(ListIterator<PStm> i = this._stm_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStm) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rbra_ == oldChild)
        {
            setRbra((TRbra) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
