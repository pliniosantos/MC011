/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class APrintsStm extends PStm
{
    private TPrint _print_;
    private TLpar _par3_;
    private PExp _printExp_;
    private TRpar _par4_;
    private TSemic _semic_;

    public APrintsStm()
    {
        // Constructor
    }

    public APrintsStm(
        @SuppressWarnings("hiding") TPrint _print_,
        @SuppressWarnings("hiding") TLpar _par3_,
        @SuppressWarnings("hiding") PExp _printExp_,
        @SuppressWarnings("hiding") TRpar _par4_,
        @SuppressWarnings("hiding") TSemic _semic_)
    {
        // Constructor
        setPrint(_print_);

        setPar3(_par3_);

        setPrintExp(_printExp_);

        setPar4(_par4_);

        setSemic(_semic_);

    }

    @Override
    public Object clone()
    {
        return new APrintsStm(
            cloneNode(this._print_),
            cloneNode(this._par3_),
            cloneNode(this._printExp_),
            cloneNode(this._par4_),
            cloneNode(this._semic_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPrintsStm(this);
    }

    public TPrint getPrint()
    {
        return this._print_;
    }

    public void setPrint(TPrint node)
    {
        if(this._print_ != null)
        {
            this._print_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._print_ = node;
    }

    public TLpar getPar3()
    {
        return this._par3_;
    }

    public void setPar3(TLpar node)
    {
        if(this._par3_ != null)
        {
            this._par3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._par3_ = node;
    }

    public PExp getPrintExp()
    {
        return this._printExp_;
    }

    public void setPrintExp(PExp node)
    {
        if(this._printExp_ != null)
        {
            this._printExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._printExp_ = node;
    }

    public TRpar getPar4()
    {
        return this._par4_;
    }

    public void setPar4(TRpar node)
    {
        if(this._par4_ != null)
        {
            this._par4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._par4_ = node;
    }

    public TSemic getSemic()
    {
        return this._semic_;
    }

    public void setSemic(TSemic node)
    {
        if(this._semic_ != null)
        {
            this._semic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semic_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._print_)
            + toString(this._par3_)
            + toString(this._printExp_)
            + toString(this._par4_)
            + toString(this._semic_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._print_ == child)
        {
            this._print_ = null;
            return;
        }

        if(this._par3_ == child)
        {
            this._par3_ = null;
            return;
        }

        if(this._printExp_ == child)
        {
            this._printExp_ = null;
            return;
        }

        if(this._par4_ == child)
        {
            this._par4_ = null;
            return;
        }

        if(this._semic_ == child)
        {
            this._semic_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._print_ == oldChild)
        {
            setPrint((TPrint) newChild);
            return;
        }

        if(this._par3_ == oldChild)
        {
            setPar3((TLpar) newChild);
            return;
        }

        if(this._printExp_ == oldChild)
        {
            setPrintExp((PExp) newChild);
            return;
        }

        if(this._par4_ == oldChild)
        {
            setPar4((TRpar) newChild);
            return;
        }

        if(this._semic_ == oldChild)
        {
            setSemic((TSemic) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
