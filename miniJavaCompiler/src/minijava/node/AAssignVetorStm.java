/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AAssignVetorStm extends PStm
{
    private TId _id1_;
    private TLcol _lcol_;
    private PExp _vetExp_;
    private TRcol _rcol_;
    private TEqual _eq_;
    private PExp _assingExp1_;
    private TSemic _sc2_;

    public AAssignVetorStm()
    {
        // Constructor
    }

    public AAssignVetorStm(
        @SuppressWarnings("hiding") TId _id1_,
        @SuppressWarnings("hiding") TLcol _lcol_,
        @SuppressWarnings("hiding") PExp _vetExp_,
        @SuppressWarnings("hiding") TRcol _rcol_,
        @SuppressWarnings("hiding") TEqual _eq_,
        @SuppressWarnings("hiding") PExp _assingExp1_,
        @SuppressWarnings("hiding") TSemic _sc2_)
    {
        // Constructor
        setId1(_id1_);

        setLcol(_lcol_);

        setVetExp(_vetExp_);

        setRcol(_rcol_);

        setEq(_eq_);

        setAssingExp1(_assingExp1_);

        setSc2(_sc2_);

    }

    @Override
    public Object clone()
    {
        return new AAssignVetorStm(
            cloneNode(this._id1_),
            cloneNode(this._lcol_),
            cloneNode(this._vetExp_),
            cloneNode(this._rcol_),
            cloneNode(this._eq_),
            cloneNode(this._assingExp1_),
            cloneNode(this._sc2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignVetorStm(this);
    }

    public TId getId1()
    {
        return this._id1_;
    }

    public void setId1(TId node)
    {
        if(this._id1_ != null)
        {
            this._id1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id1_ = node;
    }

    public TLcol getLcol()
    {
        return this._lcol_;
    }

    public void setLcol(TLcol node)
    {
        if(this._lcol_ != null)
        {
            this._lcol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lcol_ = node;
    }

    public PExp getVetExp()
    {
        return this._vetExp_;
    }

    public void setVetExp(PExp node)
    {
        if(this._vetExp_ != null)
        {
            this._vetExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._vetExp_ = node;
    }

    public TRcol getRcol()
    {
        return this._rcol_;
    }

    public void setRcol(TRcol node)
    {
        if(this._rcol_ != null)
        {
            this._rcol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rcol_ = node;
    }

    public TEqual getEq()
    {
        return this._eq_;
    }

    public void setEq(TEqual node)
    {
        if(this._eq_ != null)
        {
            this._eq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eq_ = node;
    }

    public PExp getAssingExp1()
    {
        return this._assingExp1_;
    }

    public void setAssingExp1(PExp node)
    {
        if(this._assingExp1_ != null)
        {
            this._assingExp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assingExp1_ = node;
    }

    public TSemic getSc2()
    {
        return this._sc2_;
    }

    public void setSc2(TSemic node)
    {
        if(this._sc2_ != null)
        {
            this._sc2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sc2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id1_)
            + toString(this._lcol_)
            + toString(this._vetExp_)
            + toString(this._rcol_)
            + toString(this._eq_)
            + toString(this._assingExp1_)
            + toString(this._sc2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id1_ == child)
        {
            this._id1_ = null;
            return;
        }

        if(this._lcol_ == child)
        {
            this._lcol_ = null;
            return;
        }

        if(this._vetExp_ == child)
        {
            this._vetExp_ = null;
            return;
        }

        if(this._rcol_ == child)
        {
            this._rcol_ = null;
            return;
        }

        if(this._eq_ == child)
        {
            this._eq_ = null;
            return;
        }

        if(this._assingExp1_ == child)
        {
            this._assingExp1_ = null;
            return;
        }

        if(this._sc2_ == child)
        {
            this._sc2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id1_ == oldChild)
        {
            setId1((TId) newChild);
            return;
        }

        if(this._lcol_ == oldChild)
        {
            setLcol((TLcol) newChild);
            return;
        }

        if(this._vetExp_ == oldChild)
        {
            setVetExp((PExp) newChild);
            return;
        }

        if(this._rcol_ == oldChild)
        {
            setRcol((TRcol) newChild);
            return;
        }

        if(this._eq_ == oldChild)
        {
            setEq((TEqual) newChild);
            return;
        }

        if(this._assingExp1_ == oldChild)
        {
            setAssingExp1((PExp) newChild);
            return;
        }

        if(this._sc2_ == oldChild)
        {
            setSc2((TSemic) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
