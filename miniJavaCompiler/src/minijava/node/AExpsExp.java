/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AExpsExp extends PExp
{
    private PExp2 _exp2_;
    private TLcol _lcol_;
    private PExp _exp_;
    private TRcol _rcol_;

    public AExpsExp()
    {
        // Constructor
    }

    public AExpsExp(
        @SuppressWarnings("hiding") PExp2 _exp2_,
        @SuppressWarnings("hiding") TLcol _lcol_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TRcol _rcol_)
    {
        // Constructor
        setExp2(_exp2_);

        setLcol(_lcol_);

        setExp(_exp_);

        setRcol(_rcol_);

    }

    @Override
    public Object clone()
    {
        return new AExpsExp(
            cloneNode(this._exp2_),
            cloneNode(this._lcol_),
            cloneNode(this._exp_),
            cloneNode(this._rcol_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExpsExp(this);
    }

    public PExp2 getExp2()
    {
        return this._exp2_;
    }

    public void setExp2(PExp2 node)
    {
        if(this._exp2_ != null)
        {
            this._exp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp2_ = node;
    }

    public TLcol getLcol()
    {
        return this._lcol_;
    }

    public void setLcol(TLcol node)
    {
        if(this._lcol_ != null)
        {
            this._lcol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lcol_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TRcol getRcol()
    {
        return this._rcol_;
    }

    public void setRcol(TRcol node)
    {
        if(this._rcol_ != null)
        {
            this._rcol_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rcol_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp2_)
            + toString(this._lcol_)
            + toString(this._exp_)
            + toString(this._rcol_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp2_ == child)
        {
            this._exp2_ = null;
            return;
        }

        if(this._lcol_ == child)
        {
            this._lcol_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._rcol_ == child)
        {
            this._rcol_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp2_ == oldChild)
        {
            setExp2((PExp2) newChild);
            return;
        }

        if(this._lcol_ == oldChild)
        {
            setLcol((TLcol) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._rcol_ == oldChild)
        {
            setRcol((TRcol) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
