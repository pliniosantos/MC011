/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import java.util.*;
import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AProgram extends PProgram
{
    private PMainclass _mainclass_;
    private final LinkedList<PNextclass> _nextclass_ = new LinkedList<PNextclass>();

    public AProgram()
    {
        // Constructor
    }

    public AProgram(
        @SuppressWarnings("hiding") PMainclass _mainclass_,
        @SuppressWarnings("hiding") List<PNextclass> _nextclass_)
    {
        // Constructor
        setMainclass(_mainclass_);

        setNextclass(_nextclass_);

    }

    @Override
    public Object clone()
    {
        return new AProgram(
            cloneNode(this._mainclass_),
            cloneList(this._nextclass_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgram(this);
    }

    public PMainclass getMainclass()
    {
        return this._mainclass_;
    }

    public void setMainclass(PMainclass node)
    {
        if(this._mainclass_ != null)
        {
            this._mainclass_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mainclass_ = node;
    }

    public LinkedList<PNextclass> getNextclass()
    {
        return this._nextclass_;
    }

    public void setNextclass(List<PNextclass> list)
    {
        this._nextclass_.clear();
        this._nextclass_.addAll(list);
        for(PNextclass e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._mainclass_)
            + toString(this._nextclass_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._mainclass_ == child)
        {
            this._mainclass_ = null;
            return;
        }

        if(this._nextclass_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._mainclass_ == oldChild)
        {
            setMainclass((PMainclass) newChild);
            return;
        }

        for(ListIterator<PNextclass> i = this._nextclass_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PNextclass) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
