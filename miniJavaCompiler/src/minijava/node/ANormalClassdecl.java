/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import java.util.*;
import minijava.analysis.*;

@SuppressWarnings("nls")
public final class ANormalClassdecl extends PClassdecl
{
    private TClasse _classe_;
    private TId _id_;
    private TLbra _c1_;
    private final LinkedList<PVardecl> _vardecl_ = new LinkedList<PVardecl>();
    private final LinkedList<PMethoddecl> _methoddecl_ = new LinkedList<PMethoddecl>();
    private TRbra _c2_;

    public ANormalClassdecl()
    {
        // Constructor
    }

    public ANormalClassdecl(
        @SuppressWarnings("hiding") TClasse _classe_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLbra _c1_,
        @SuppressWarnings("hiding") List<PVardecl> _vardecl_,
        @SuppressWarnings("hiding") List<PMethoddecl> _methoddecl_,
        @SuppressWarnings("hiding") TRbra _c2_)
    {
        // Constructor
        setClasse(_classe_);

        setId(_id_);

        setC1(_c1_);

        setVardecl(_vardecl_);

        setMethoddecl(_methoddecl_);

        setC2(_c2_);

    }

    @Override
    public Object clone()
    {
        return new ANormalClassdecl(
            cloneNode(this._classe_),
            cloneNode(this._id_),
            cloneNode(this._c1_),
            cloneList(this._vardecl_),
            cloneList(this._methoddecl_),
            cloneNode(this._c2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANormalClassdecl(this);
    }

    public TClasse getClasse()
    {
        return this._classe_;
    }

    public void setClasse(TClasse node)
    {
        if(this._classe_ != null)
        {
            this._classe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._classe_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLbra getC1()
    {
        return this._c1_;
    }

    public void setC1(TLbra node)
    {
        if(this._c1_ != null)
        {
            this._c1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c1_ = node;
    }

    public LinkedList<PVardecl> getVardecl()
    {
        return this._vardecl_;
    }

    public void setVardecl(List<PVardecl> list)
    {
        this._vardecl_.clear();
        this._vardecl_.addAll(list);
        for(PVardecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PMethoddecl> getMethoddecl()
    {
        return this._methoddecl_;
    }

    public void setMethoddecl(List<PMethoddecl> list)
    {
        this._methoddecl_.clear();
        this._methoddecl_.addAll(list);
        for(PMethoddecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TRbra getC2()
    {
        return this._c2_;
    }

    public void setC2(TRbra node)
    {
        if(this._c2_ != null)
        {
            this._c2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._classe_)
            + toString(this._id_)
            + toString(this._c1_)
            + toString(this._vardecl_)
            + toString(this._methoddecl_)
            + toString(this._c2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._classe_ == child)
        {
            this._classe_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._c1_ == child)
        {
            this._c1_ = null;
            return;
        }

        if(this._vardecl_.remove(child))
        {
            return;
        }

        if(this._methoddecl_.remove(child))
        {
            return;
        }

        if(this._c2_ == child)
        {
            this._c2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._classe_ == oldChild)
        {
            setClasse((TClasse) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._c1_ == oldChild)
        {
            setC1((TLbra) newChild);
            return;
        }

        for(ListIterator<PVardecl> i = this._vardecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVardecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PMethoddecl> i = this._methoddecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMethoddecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._c2_ == oldChild)
        {
            setC2((TRbra) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
