/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AAssignStm extends PStm
{
    private TId _id_;
    private TEqual _equal_;
    private PExp _assignExp_;
    private TSemic _sc1_;

    public AAssignStm()
    {
        // Constructor
    }

    public AAssignStm(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") PExp _assignExp_,
        @SuppressWarnings("hiding") TSemic _sc1_)
    {
        // Constructor
        setId(_id_);

        setEqual(_equal_);

        setAssignExp(_assignExp_);

        setSc1(_sc1_);

    }

    @Override
    public Object clone()
    {
        return new AAssignStm(
            cloneNode(this._id_),
            cloneNode(this._equal_),
            cloneNode(this._assignExp_),
            cloneNode(this._sc1_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignStm(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public PExp getAssignExp()
    {
        return this._assignExp_;
    }

    public void setAssignExp(PExp node)
    {
        if(this._assignExp_ != null)
        {
            this._assignExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assignExp_ = node;
    }

    public TSemic getSc1()
    {
        return this._sc1_;
    }

    public void setSc1(TSemic node)
    {
        if(this._sc1_ != null)
        {
            this._sc1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sc1_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._equal_)
            + toString(this._assignExp_)
            + toString(this._sc1_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._assignExp_ == child)
        {
            this._assignExp_ = null;
            return;
        }

        if(this._sc1_ == child)
        {
            this._sc1_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._assignExp_ == oldChild)
        {
            setAssignExp((PExp) newChild);
            return;
        }

        if(this._sc1_ == oldChild)
        {
            setSc1((TSemic) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
