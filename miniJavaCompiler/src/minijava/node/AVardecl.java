/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AVardecl extends PVardecl
{
    private PType _type_;
    private TId _id_;
    private TSemic _semic_;

    public AVardecl()
    {
        // Constructor
    }

    public AVardecl(
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TSemic _semic_)
    {
        // Constructor
        setType(_type_);

        setId(_id_);

        setSemic(_semic_);

    }

    @Override
    public Object clone()
    {
        return new AVardecl(
            cloneNode(this._type_),
            cloneNode(this._id_),
            cloneNode(this._semic_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVardecl(this);
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TSemic getSemic()
    {
        return this._semic_;
    }

    public void setSemic(TSemic node)
    {
        if(this._semic_ != null)
        {
            this._semic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semic_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._type_)
            + toString(this._id_)
            + toString(this._semic_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._semic_ == child)
        {
            this._semic_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._semic_ == oldChild)
        {
            setSemic((TSemic) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
