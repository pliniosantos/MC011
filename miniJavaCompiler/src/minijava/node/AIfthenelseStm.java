/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AIfthenelseStm extends PStm
{
    private TIf _if_;
    private TLpar _lpar_;
    private PExp _exp_;
    private TRpar _rpar_;
    private PStm _trueStm_;
    private TElse _else_;
    private PStm _falseStm_;

    public AIfthenelseStm()
    {
        // Constructor
    }

    public AIfthenelseStm(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") TLpar _lpar_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TRpar _rpar_,
        @SuppressWarnings("hiding") PStm _trueStm_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PStm _falseStm_)
    {
        // Constructor
        setIf(_if_);

        setLpar(_lpar_);

        setExp(_exp_);

        setRpar(_rpar_);

        setTrueStm(_trueStm_);

        setElse(_else_);

        setFalseStm(_falseStm_);

    }

    @Override
    public Object clone()
    {
        return new AIfthenelseStm(
            cloneNode(this._if_),
            cloneNode(this._lpar_),
            cloneNode(this._exp_),
            cloneNode(this._rpar_),
            cloneNode(this._trueStm_),
            cloneNode(this._else_),
            cloneNode(this._falseStm_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfthenelseStm(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public TLpar getLpar()
    {
        return this._lpar_;
    }

    public void setLpar(TLpar node)
    {
        if(this._lpar_ != null)
        {
            this._lpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lpar_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TRpar getRpar()
    {
        return this._rpar_;
    }

    public void setRpar(TRpar node)
    {
        if(this._rpar_ != null)
        {
            this._rpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rpar_ = node;
    }

    public PStm getTrueStm()
    {
        return this._trueStm_;
    }

    public void setTrueStm(PStm node)
    {
        if(this._trueStm_ != null)
        {
            this._trueStm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._trueStm_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PStm getFalseStm()
    {
        return this._falseStm_;
    }

    public void setFalseStm(PStm node)
    {
        if(this._falseStm_ != null)
        {
            this._falseStm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._falseStm_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._lpar_)
            + toString(this._exp_)
            + toString(this._rpar_)
            + toString(this._trueStm_)
            + toString(this._else_)
            + toString(this._falseStm_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._lpar_ == child)
        {
            this._lpar_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._rpar_ == child)
        {
            this._rpar_ = null;
            return;
        }

        if(this._trueStm_ == child)
        {
            this._trueStm_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._falseStm_ == child)
        {
            this._falseStm_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._lpar_ == oldChild)
        {
            setLpar((TLpar) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._rpar_ == oldChild)
        {
            setRpar((TRpar) newChild);
            return;
        }

        if(this._trueStm_ == oldChild)
        {
            setTrueStm((PStm) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._falseStm_ == oldChild)
        {
            setFalseStm((PStm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
