/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class ANewidExp2 extends PExp2
{
    private TNew _novo_;
    private TId _newId_;
    private TLpar _par1_;
    private TRpar _par2_;

    public ANewidExp2()
    {
        // Constructor
    }

    public ANewidExp2(
        @SuppressWarnings("hiding") TNew _novo_,
        @SuppressWarnings("hiding") TId _newId_,
        @SuppressWarnings("hiding") TLpar _par1_,
        @SuppressWarnings("hiding") TRpar _par2_)
    {
        // Constructor
        setNovo(_novo_);

        setNewId(_newId_);

        setPar1(_par1_);

        setPar2(_par2_);

    }

    @Override
    public Object clone()
    {
        return new ANewidExp2(
            cloneNode(this._novo_),
            cloneNode(this._newId_),
            cloneNode(this._par1_),
            cloneNode(this._par2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANewidExp2(this);
    }

    public TNew getNovo()
    {
        return this._novo_;
    }

    public void setNovo(TNew node)
    {
        if(this._novo_ != null)
        {
            this._novo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._novo_ = node;
    }

    public TId getNewId()
    {
        return this._newId_;
    }

    public void setNewId(TId node)
    {
        if(this._newId_ != null)
        {
            this._newId_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._newId_ = node;
    }

    public TLpar getPar1()
    {
        return this._par1_;
    }

    public void setPar1(TLpar node)
    {
        if(this._par1_ != null)
        {
            this._par1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._par1_ = node;
    }

    public TRpar getPar2()
    {
        return this._par2_;
    }

    public void setPar2(TRpar node)
    {
        if(this._par2_ != null)
        {
            this._par2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._par2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._novo_)
            + toString(this._newId_)
            + toString(this._par1_)
            + toString(this._par2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._novo_ == child)
        {
            this._novo_ = null;
            return;
        }

        if(this._newId_ == child)
        {
            this._newId_ = null;
            return;
        }

        if(this._par1_ == child)
        {
            this._par1_ = null;
            return;
        }

        if(this._par2_ == child)
        {
            this._par2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._novo_ == oldChild)
        {
            setNovo((TNew) newChild);
            return;
        }

        if(this._newId_ == oldChild)
        {
            setNewId((TId) newChild);
            return;
        }

        if(this._par1_ == oldChild)
        {
            setPar1((TLpar) newChild);
            return;
        }

        if(this._par2_ == oldChild)
        {
            setPar2((TRpar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
