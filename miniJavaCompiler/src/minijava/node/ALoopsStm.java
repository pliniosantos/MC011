/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class ALoopsStm extends PStm
{
    private TWhile _while_;
    private TLpar _par1_;
    private PExp _exp1_;
    private TRpar _par2_;
    private PStm _whileStm_;

    public ALoopsStm()
    {
        // Constructor
    }

    public ALoopsStm(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") TLpar _par1_,
        @SuppressWarnings("hiding") PExp _exp1_,
        @SuppressWarnings("hiding") TRpar _par2_,
        @SuppressWarnings("hiding") PStm _whileStm_)
    {
        // Constructor
        setWhile(_while_);

        setPar1(_par1_);

        setExp1(_exp1_);

        setPar2(_par2_);

        setWhileStm(_whileStm_);

    }

    @Override
    public Object clone()
    {
        return new ALoopsStm(
            cloneNode(this._while_),
            cloneNode(this._par1_),
            cloneNode(this._exp1_),
            cloneNode(this._par2_),
            cloneNode(this._whileStm_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALoopsStm(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public TLpar getPar1()
    {
        return this._par1_;
    }

    public void setPar1(TLpar node)
    {
        if(this._par1_ != null)
        {
            this._par1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._par1_ = node;
    }

    public PExp getExp1()
    {
        return this._exp1_;
    }

    public void setExp1(PExp node)
    {
        if(this._exp1_ != null)
        {
            this._exp1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp1_ = node;
    }

    public TRpar getPar2()
    {
        return this._par2_;
    }

    public void setPar2(TRpar node)
    {
        if(this._par2_ != null)
        {
            this._par2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._par2_ = node;
    }

    public PStm getWhileStm()
    {
        return this._whileStm_;
    }

    public void setWhileStm(PStm node)
    {
        if(this._whileStm_ != null)
        {
            this._whileStm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._whileStm_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._par1_)
            + toString(this._exp1_)
            + toString(this._par2_)
            + toString(this._whileStm_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._par1_ == child)
        {
            this._par1_ = null;
            return;
        }

        if(this._exp1_ == child)
        {
            this._exp1_ = null;
            return;
        }

        if(this._par2_ == child)
        {
            this._par2_ = null;
            return;
        }

        if(this._whileStm_ == child)
        {
            this._whileStm_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._par1_ == oldChild)
        {
            setPar1((TLpar) newChild);
            return;
        }

        if(this._exp1_ == oldChild)
        {
            setExp1((PExp) newChild);
            return;
        }

        if(this._par2_ == oldChild)
        {
            setPar2((TRpar) newChild);
            return;
        }

        if(this._whileStm_ == oldChild)
        {
            setWhileStm((PStm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
