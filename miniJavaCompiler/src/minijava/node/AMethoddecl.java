/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import java.util.*;
import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AMethoddecl extends PMethoddecl
{
    private TPublic _public_;
    private PType _type_;
    private TId _id_;
    private TLpar _lpar_;
    private PFormallist _formallist_;
    private TRpar _rpar_;
    private TLbra _lbra_;
    private final LinkedList<PVardecl> _vardecl_ = new LinkedList<PVardecl>();
    private final LinkedList<PStm> _stm_ = new LinkedList<PStm>();
    private TReturn _return_;
    private PExp _exp_;
    private TSemic _semic_;
    private TRbra _rbra_;

    public AMethoddecl()
    {
        // Constructor
    }

    public AMethoddecl(
        @SuppressWarnings("hiding") TPublic _public_,
        @SuppressWarnings("hiding") PType _type_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLpar _lpar_,
        @SuppressWarnings("hiding") PFormallist _formallist_,
        @SuppressWarnings("hiding") TRpar _rpar_,
        @SuppressWarnings("hiding") TLbra _lbra_,
        @SuppressWarnings("hiding") List<PVardecl> _vardecl_,
        @SuppressWarnings("hiding") List<PStm> _stm_,
        @SuppressWarnings("hiding") TReturn _return_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TSemic _semic_,
        @SuppressWarnings("hiding") TRbra _rbra_)
    {
        // Constructor
        setPublic(_public_);

        setType(_type_);

        setId(_id_);

        setLpar(_lpar_);

        setFormallist(_formallist_);

        setRpar(_rpar_);

        setLbra(_lbra_);

        setVardecl(_vardecl_);

        setStm(_stm_);

        setReturn(_return_);

        setExp(_exp_);

        setSemic(_semic_);

        setRbra(_rbra_);

    }

    @Override
    public Object clone()
    {
        return new AMethoddecl(
            cloneNode(this._public_),
            cloneNode(this._type_),
            cloneNode(this._id_),
            cloneNode(this._lpar_),
            cloneNode(this._formallist_),
            cloneNode(this._rpar_),
            cloneNode(this._lbra_),
            cloneList(this._vardecl_),
            cloneList(this._stm_),
            cloneNode(this._return_),
            cloneNode(this._exp_),
            cloneNode(this._semic_),
            cloneNode(this._rbra_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethoddecl(this);
    }

    public TPublic getPublic()
    {
        return this._public_;
    }

    public void setPublic(TPublic node)
    {
        if(this._public_ != null)
        {
            this._public_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._public_ = node;
    }

    public PType getType()
    {
        return this._type_;
    }

    public void setType(PType node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLpar getLpar()
    {
        return this._lpar_;
    }

    public void setLpar(TLpar node)
    {
        if(this._lpar_ != null)
        {
            this._lpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lpar_ = node;
    }

    public PFormallist getFormallist()
    {
        return this._formallist_;
    }

    public void setFormallist(PFormallist node)
    {
        if(this._formallist_ != null)
        {
            this._formallist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._formallist_ = node;
    }

    public TRpar getRpar()
    {
        return this._rpar_;
    }

    public void setRpar(TRpar node)
    {
        if(this._rpar_ != null)
        {
            this._rpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rpar_ = node;
    }

    public TLbra getLbra()
    {
        return this._lbra_;
    }

    public void setLbra(TLbra node)
    {
        if(this._lbra_ != null)
        {
            this._lbra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lbra_ = node;
    }

    public LinkedList<PVardecl> getVardecl()
    {
        return this._vardecl_;
    }

    public void setVardecl(List<PVardecl> list)
    {
        this._vardecl_.clear();
        this._vardecl_.addAll(list);
        for(PVardecl e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public LinkedList<PStm> getStm()
    {
        return this._stm_;
    }

    public void setStm(List<PStm> list)
    {
        this._stm_.clear();
        this._stm_.addAll(list);
        for(PStm e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TReturn getReturn()
    {
        return this._return_;
    }

    public void setReturn(TReturn node)
    {
        if(this._return_ != null)
        {
            this._return_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._return_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TSemic getSemic()
    {
        return this._semic_;
    }

    public void setSemic(TSemic node)
    {
        if(this._semic_ != null)
        {
            this._semic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semic_ = node;
    }

    public TRbra getRbra()
    {
        return this._rbra_;
    }

    public void setRbra(TRbra node)
    {
        if(this._rbra_ != null)
        {
            this._rbra_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rbra_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._public_)
            + toString(this._type_)
            + toString(this._id_)
            + toString(this._lpar_)
            + toString(this._formallist_)
            + toString(this._rpar_)
            + toString(this._lbra_)
            + toString(this._vardecl_)
            + toString(this._stm_)
            + toString(this._return_)
            + toString(this._exp_)
            + toString(this._semic_)
            + toString(this._rbra_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._public_ == child)
        {
            this._public_ = null;
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lpar_ == child)
        {
            this._lpar_ = null;
            return;
        }

        if(this._formallist_ == child)
        {
            this._formallist_ = null;
            return;
        }

        if(this._rpar_ == child)
        {
            this._rpar_ = null;
            return;
        }

        if(this._lbra_ == child)
        {
            this._lbra_ = null;
            return;
        }

        if(this._vardecl_.remove(child))
        {
            return;
        }

        if(this._stm_.remove(child))
        {
            return;
        }

        if(this._return_ == child)
        {
            this._return_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._semic_ == child)
        {
            this._semic_ = null;
            return;
        }

        if(this._rbra_ == child)
        {
            this._rbra_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._public_ == oldChild)
        {
            setPublic((TPublic) newChild);
            return;
        }

        if(this._type_ == oldChild)
        {
            setType((PType) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lpar_ == oldChild)
        {
            setLpar((TLpar) newChild);
            return;
        }

        if(this._formallist_ == oldChild)
        {
            setFormallist((PFormallist) newChild);
            return;
        }

        if(this._rpar_ == oldChild)
        {
            setRpar((TRpar) newChild);
            return;
        }

        if(this._lbra_ == oldChild)
        {
            setLbra((TLbra) newChild);
            return;
        }

        for(ListIterator<PVardecl> i = this._vardecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVardecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStm> i = this._stm_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStm) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._return_ == oldChild)
        {
            setReturn((TReturn) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._semic_ == oldChild)
        {
            setSemic((TSemic) newChild);
            return;
        }

        if(this._rbra_ == oldChild)
        {
            setRbra((TRbra) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
