/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.node;

import minijava.analysis.*;

@SuppressWarnings("nls")
public final class AListExp extends PExp
{
    private PExp2 _exp2_;
    private TDot _d1_;
    private TId _id_;
    private TLpar _lpar_;
    private PExplist _explist_;
    private TRpar _rpar_;

    public AListExp()
    {
        // Constructor
    }

    public AListExp(
        @SuppressWarnings("hiding") PExp2 _exp2_,
        @SuppressWarnings("hiding") TDot _d1_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLpar _lpar_,
        @SuppressWarnings("hiding") PExplist _explist_,
        @SuppressWarnings("hiding") TRpar _rpar_)
    {
        // Constructor
        setExp2(_exp2_);

        setD1(_d1_);

        setId(_id_);

        setLpar(_lpar_);

        setExplist(_explist_);

        setRpar(_rpar_);

    }

    @Override
    public Object clone()
    {
        return new AListExp(
            cloneNode(this._exp2_),
            cloneNode(this._d1_),
            cloneNode(this._id_),
            cloneNode(this._lpar_),
            cloneNode(this._explist_),
            cloneNode(this._rpar_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListExp(this);
    }

    public PExp2 getExp2()
    {
        return this._exp2_;
    }

    public void setExp2(PExp2 node)
    {
        if(this._exp2_ != null)
        {
            this._exp2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp2_ = node;
    }

    public TDot getD1()
    {
        return this._d1_;
    }

    public void setD1(TDot node)
    {
        if(this._d1_ != null)
        {
            this._d1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._d1_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLpar getLpar()
    {
        return this._lpar_;
    }

    public void setLpar(TLpar node)
    {
        if(this._lpar_ != null)
        {
            this._lpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lpar_ = node;
    }

    public PExplist getExplist()
    {
        return this._explist_;
    }

    public void setExplist(PExplist node)
    {
        if(this._explist_ != null)
        {
            this._explist_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._explist_ = node;
    }

    public TRpar getRpar()
    {
        return this._rpar_;
    }

    public void setRpar(TRpar node)
    {
        if(this._rpar_ != null)
        {
            this._rpar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rpar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp2_)
            + toString(this._d1_)
            + toString(this._id_)
            + toString(this._lpar_)
            + toString(this._explist_)
            + toString(this._rpar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp2_ == child)
        {
            this._exp2_ = null;
            return;
        }

        if(this._d1_ == child)
        {
            this._d1_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lpar_ == child)
        {
            this._lpar_ = null;
            return;
        }

        if(this._explist_ == child)
        {
            this._explist_ = null;
            return;
        }

        if(this._rpar_ == child)
        {
            this._rpar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp2_ == oldChild)
        {
            setExp2((PExp2) newChild);
            return;
        }

        if(this._d1_ == oldChild)
        {
            setD1((TDot) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lpar_ == oldChild)
        {
            setLpar((TLpar) newChild);
            return;
        }

        if(this._explist_ == oldChild)
        {
            setExplist((PExplist) newChild);
            return;
        }

        if(this._rpar_ == oldChild)
        {
            setRpar((TRpar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
