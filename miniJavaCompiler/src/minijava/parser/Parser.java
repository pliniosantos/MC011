/* This file was generated by SableCC (http://www.sablecc.org/). */

package minijava.parser;

import minijava.lexer.*;
import minijava.node.*;
import minijava.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce AProgram */
		    {
			ArrayList list = new0();
			push(goTo(0), list);
		    }
		    break;
                    case 1: /* reduce AMainclass */
		    {
			ArrayList list = new1();
			push(goTo(1), list);
		    }
		    break;
                    case 2: /* reduce AExtClassdecl */
		    {
			ArrayList list = new2();
			push(goTo(2), list);
		    }
		    break;
                    case 3: /* reduce ANonextClassdecl */
		    {
			ArrayList list = new3();
			push(goTo(2), list);
		    }
		    break;
                    case 4: /* reduce AEmptyClassdecl */
		    {
			ArrayList list = new4();
			push(goTo(2), list);
		    }
		    break;
                    case 5: /* reduce ANonemptyVardecl */
		    {
			ArrayList list = new5();
			push(goTo(3), list);
		    }
		    break;
                    case 6: /* reduce AEmptyVardecl */
		    {
			ArrayList list = new6();
			push(goTo(3), list);
		    }
		    break;
                    case 7: /* reduce ANonemptyMethoddecl */
		    {
			ArrayList list = new7();
			push(goTo(4), list);
		    }
		    break;
                    case 8: /* reduce AEmptyMethoddecl */
		    {
			ArrayList list = new8();
			push(goTo(4), list);
		    }
		    break;
                    case 9: /* reduce ANonemptyFormallist */
		    {
			ArrayList list = new9();
			push(goTo(5), list);
		    }
		    break;
                    case 10: /* reduce AEmptyFormallist */
		    {
			ArrayList list = new10();
			push(goTo(5), list);
		    }
		    break;
                    case 11: /* reduce ARemainderFormalrest */
		    {
			ArrayList list = new11();
			push(goTo(6), list);
		    }
		    break;
                    case 12: /* reduce AEmptyFormalrest */
		    {
			ArrayList list = new12();
			push(goTo(6), list);
		    }
		    break;
                    case 13: /* reduce ANonemptyStatementlist */
		    {
			ArrayList list = new13();
			push(goTo(7), list);
		    }
		    break;
                    case 14: /* reduce AEmptyStatementlist */
		    {
			ArrayList list = new14();
			push(goTo(7), list);
		    }
		    break;
                    case 15: /* reduce ANestedStatement */
		    {
			ArrayList list = new15();
			push(goTo(8), list);
		    }
		    break;
                    case 16: /* reduce AIfelseStatement */
		    {
			ArrayList list = new16();
			push(goTo(8), list);
		    }
		    break;
                    case 17: /* reduce AWhileStatement */
		    {
			ArrayList list = new17();
			push(goTo(8), list);
		    }
		    break;
                    case 18: /* reduce APrintStatement */
		    {
			ArrayList list = new18();
			push(goTo(8), list);
		    }
		    break;
                    case 19: /* reduce AAssignStatement */
		    {
			ArrayList list = new19();
			push(goTo(8), list);
		    }
		    break;
                    case 20: /* reduce AVassignStatement */
		    {
			ArrayList list = new20();
			push(goTo(8), list);
		    }
		    break;
                    case 21: /* reduce AInttType */
		    {
			ArrayList list = new21();
			push(goTo(9), list);
		    }
		    break;
                    case 22: /* reduce AIntvType */
		    {
			ArrayList list = new22();
			push(goTo(9), list);
		    }
		    break;
                    case 23: /* reduce ABoolType */
		    {
			ArrayList list = new23();
			push(goTo(9), list);
		    }
		    break;
                    case 24: /* reduce AClassType */
		    {
			ArrayList list = new24();
			push(goTo(9), list);
		    }
		    break;
                    case 25: /* reduce ANameNoarrayexpr */
		    {
			ArrayList list = new25();
			push(goTo(10), list);
		    }
		    break;
                    case 26: /* reduce ALiteralNoarrayexpr */
		    {
			ArrayList list = new26();
			push(goTo(10), list);
		    }
		    break;
                    case 27: /* reduce ATrueNoarrayexpr */
		    {
			ArrayList list = new27();
			push(goTo(10), list);
		    }
		    break;
                    case 28: /* reduce AFalseNoarrayexpr */
		    {
			ArrayList list = new28();
			push(goTo(10), list);
		    }
		    break;
                    case 29: /* reduce ASelfNoarrayexpr */
		    {
			ArrayList list = new29();
			push(goTo(10), list);
		    }
		    break;
                    case 30: /* reduce AParexpNoarrayexpr */
		    {
			ArrayList list = new30();
			push(goTo(10), list);
		    }
		    break;
                    case 31: /* reduce AVaccessNoarrayexpr */
		    {
			ArrayList list = new31();
			push(goTo(10), list);
		    }
		    break;
                    case 32: /* reduce ALengthNoarrayexpr */
		    {
			ArrayList list = new32();
			push(goTo(10), list);
		    }
		    break;
                    case 33: /* reduce AMaccessNoarrayexpr */
		    {
			ArrayList list = new33();
			push(goTo(10), list);
		    }
		    break;
                    case 34: /* reduce ANewcNoarrayexpr */
		    {
			ArrayList list = new34();
			push(goTo(10), list);
		    }
		    break;
                    case 35: /* reduce ANewarrPrimaryexpr */
		    {
			ArrayList list = new35();
			push(goTo(11), list);
		    }
		    break;
                    case 36: /* reduce ANextPrimaryexpr */
		    {
			ArrayList list = new36();
			push(goTo(11), list);
		    }
		    break;
                    case 37: /* reduce ANotUnaryexpr */
		    {
			ArrayList list = new37();
			push(goTo(12), list);
		    }
		    break;
                    case 38: /* reduce ANextUnaryexpr */
		    {
			ArrayList list = new38();
			push(goTo(12), list);
		    }
		    break;
                    case 39: /* reduce AMultIpexpr */
		    {
			ArrayList list = new39();
			push(goTo(13), list);
		    }
		    break;
                    case 40: /* reduce ANextIpexpr */
		    {
			ArrayList list = new40();
			push(goTo(13), list);
		    }
		    break;
                    case 41: /* reduce APlusIaexpr */
		    {
			ArrayList list = new41();
			push(goTo(14), list);
		    }
		    break;
                    case 42: /* reduce AMinusIaexpr */
		    {
			ArrayList list = new42();
			push(goTo(14), list);
		    }
		    break;
                    case 43: /* reduce ANextIaexpr */
		    {
			ArrayList list = new43();
			push(goTo(14), list);
		    }
		    break;
                    case 44: /* reduce AGreaterBexpr */
		    {
			ArrayList list = new44();
			push(goTo(15), list);
		    }
		    break;
                    case 45: /* reduce ALessBexpr */
		    {
			ArrayList list = new45();
			push(goTo(15), list);
		    }
		    break;
                    case 46: /* reduce ANextBexpr */
		    {
			ArrayList list = new46();
			push(goTo(15), list);
		    }
		    break;
                    case 47: /* reduce AAndExpr */
		    {
			ArrayList list = new47();
			push(goTo(16), list);
		    }
		    break;
                    case 48: /* reduce ANextExpr */
		    {
			ArrayList list = new48();
			push(goTo(16), list);
		    }
		    break;
                    case 49: /* reduce ANonemptyExprlist */
		    {
			ArrayList list = new49();
			push(goTo(17), list);
		    }
		    break;
                    case 50: /* reduce AEmptyExprlist */
		    {
			ArrayList list = new50();
			push(goTo(17), list);
		    }
		    break;
                    case 51: /* reduce ARemainderExprrest */
		    {
			ArrayList list = new51();
			push(goTo(18), list);
		    }
		    break;
                    case 52: /* reduce AEmptyExprrest */
		    {
			ArrayList list = new52();
			push(goTo(18), list);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainclass pmainclassNode2;
        LinkedList listNode4 = new LinkedList();
        pmainclassNode2 = (PMainclass)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AMainclass */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList17 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList16 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList15 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PMainclass pmainclassNode1;
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList12.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList15.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pmainclassNode1 = new AMainclass(tidNode2, tidNode3, listNode5);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AExtClassdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode9 = new LinkedList();
        {
            // Block
        PNextclass pnextclassNode1;
        LinkedList listNode8 = new LinkedList();
        {
            // Block
        TId tidNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList4.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList7.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pnextclassNode1 = new AExtNextclass(tidNode2, tidNode3, listNode5, listNode7);
        }
        listNode8 = (LinkedList)nodeArrayList9.get(0);
	if(pnextclassNode1 != null)
	{
	  listNode9.add(pnextclassNode1);
	}
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
	nodeList.add(listNode9);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce ANonextClassdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode8 = new LinkedList();
        {
            // Block
        PNextclass pnextclassNode1;
        LinkedList listNode7 = new LinkedList();
        {
            // Block
        TId tidNode2;
        LinkedList listNode4 = new LinkedList();
        LinkedList listNode6 = new LinkedList();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList listNode5 = new LinkedList();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pnextclassNode1 = new ANonextNextclass(tidNode2, listNode4, listNode6);
        }
        listNode7 = (LinkedList)nodeArrayList7.get(0);
	if(pnextclassNode1 != null)
	{
	  listNode8.add(pnextclassNode1);
	}
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
	nodeList.add(listNode8);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AEmptyClassdecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce ANonemptyVardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PVar pvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        {
            // Block
        PType ptypeNode3;
        TId tidNode4;
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        pvarNode2 = new AVar(ptypeNode3, tidNode4);
        }
	if(listNode1 != null)
	{
	  listNode5.addAll(listNode1);
	}
	if(pvarNode2 != null)
	{
	  listNode5.add(pvarNode2);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AEmptyVardecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce ANonemptyMethoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList14 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode12 = new LinkedList();
        {
            // Block
        PMethod pmethodNode1;
        LinkedList listNode11 = new LinkedList();
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        LinkedList listNode7 = new LinkedList();
        LinkedList listNode9 = new LinkedList();
        PExpression pexpressionNode10;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        {
            // Block
        LinkedList listNode6 = new LinkedList();
        listNode6 = (LinkedList)nodeArrayList8.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        {
            // Block
        LinkedList listNode8 = new LinkedList();
        listNode8 = (LinkedList)nodeArrayList9.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        pexpressionNode10 = (PExpression)nodeArrayList11.get(0);

        pmethodNode1 = new AMethod(ptypeNode2, tidNode3, listNode5, listNode7, listNode9, pexpressionNode10);
        }
        listNode11 = (LinkedList)nodeArrayList14.get(0);
	if(pmethodNode1 != null)
	{
	  listNode12.add(pmethodNode1);
	}
	if(listNode11 != null)
	{
	  listNode12.addAll(listNode11);
	}
        }
	nodeList.add(listNode12);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AEmptyMethoddecl */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce ANonemptyFormallist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        PVar pvarNode1;
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pvarNode1 = new AVar(ptypeNode2, tidNode3);
        }
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(pvarNode1 != null)
	{
	  listNode5.add(pvarNode1);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce AEmptyFormallist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ARemainderFormalrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode5 = new LinkedList();
        {
            // Block
        PVar pvarNode1;
        LinkedList listNode4 = new LinkedList();
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        ptypeNode2 = (PType)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        pvarNode1 = new AVar(ptypeNode2, tidNode3);
        }
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(pvarNode1 != null)
	{
	  listNode5.add(pvarNode1);
	}
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
	nodeList.add(listNode5);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AEmptyFormalrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce ANonemptyStatementlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PStatement pstatementNode1;
        LinkedList listNode2 = new LinkedList();
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pstatementNode1 != null)
	{
	  listNode3.add(pstatementNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce AEmptyStatementlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce ANestedStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode2 = new LinkedList();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstatementNode1 = new AManyStatement(listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce AIfelseStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PStatement pstatementNode3;
        PStatement pstatementNode4;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfStatement(pexpressionNode2, pstatementNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PStatement pstatementNode3;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(pexpressionNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce APrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new APrintStatement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAssignStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        PExpression pexpressionNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new AAtbStatement(tidNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce AVassignStatement */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TId tidNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new AVatbStatement(tidNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AInttType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIntt tinttNode2;
        tinttNode2 = (TIntt)nodeArrayList1.get(0);

        ptypeNode1 = new AInttType(tinttNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AIntvType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TIntv tintvNode2;
        tintvNode2 = (TIntv)nodeArrayList1.get(0);

        ptypeNode1 = new AIntvType(tintvNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBool tboolNode2;
        tboolNode2 = (TBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AClassType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AClassType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce ANameNoarrayexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pexpressionNode1 = new AVarExpression(tidNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ALiteralNoarrayexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpressionNode1 = new ANumberExpression(tnumberNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce ATrueNoarrayexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpressionNode1 = new ABtrueExpression(ttrueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce AFalseNoarrayexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpressionNode1 = new ABfalseExpression(tfalseNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce ASelfNoarrayexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TThis tthisNode2;
        tthisNode2 = (TThis)nodeArrayList1.get(0);

        pexpressionNode1 = new ASelfExpression(tthisNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AParexpNoarrayexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AVaccessNoarrayexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AVectorExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce ALengthNoarrayexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);

        pexpressionNode1 = new ALengthExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AMaccessNoarrayexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        TId tidNode3;
        LinkedList listNode5 = new LinkedList();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        {
            // Block
        LinkedList listNode4 = new LinkedList();
        listNode4 = (LinkedList)nodeArrayList5.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pexpressionNode1 = new AMcallExpression(pexpressionNode2, tidNode3, listNode5);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce ANewcNoarrayexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList2.get(0);

        pexpressionNode1 = new ANewobjExpression(tidNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce ANewarrPrimaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList4.get(0);

        pexpressionNode1 = new ANewvecExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce ANextPrimaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce ANotUnaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new ANotExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce ANextUnaryexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AMultIpexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce ANextIpexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce APlusIaexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new APlusExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AMinusIaexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMinusExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce ANextIaexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce AGreaterBexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AGthanExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce ALessBexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ALthanExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ANextBexpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AAndExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAndExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce ANextExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ANonemptyExprlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExpression pexpressionNode1;
        LinkedList listNode2 = new LinkedList();
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode3.add(pexpressionNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce AEmptyExprlist */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ARemainderExprrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        PExpression pexpressionNode1;
        LinkedList listNode2 = new LinkedList();
        pexpressionNode1 = (PExpression)nodeArrayList2.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(pexpressionNode1 != null)
	{
	  listNode3.add(pexpressionNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce AEmptyExprrest */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        LinkedList listNode1 = new LinkedList();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {3, SHIFT, 1}, },
			{{-1, ERROR, 1}, {37, SHIFT, 4}, },
			{{-1, ERROR, 2}, {39, ACCEPT, -1}, },
			{{-1, REDUCE, 4}, {3, SHIFT, 5}, },
			{{-1, ERROR, 4}, {24, SHIFT, 7}, },
			{{-1, ERROR, 5}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 7}, {4, SHIFT, 9}, },
			{{-1, ERROR, 8}, {5, SHIFT, 10}, {24, SHIFT, 11}, },
			{{-1, ERROR, 9}, {17, SHIFT, 12}, },
			{{-1, ERROR, 10}, {37, SHIFT, 13}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 12}, {18, SHIFT, 15}, },
			{{-1, ERROR, 13}, {24, SHIFT, 16}, },
			{{-1, REDUCE, 8}, {0, SHIFT, 17}, {1, SHIFT, 18}, {2, SHIFT, 19}, {4, SHIFT, 20}, {37, SHIFT, 21}, },
			{{-1, ERROR, 15}, {19, SHIFT, 24}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 20}, {0, SHIFT, 17}, {1, SHIFT, 18}, {2, SHIFT, 19}, {37, SHIFT, 21}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 22}, {25, SHIFT, 27}, },
			{{-1, ERROR, 23}, {37, SHIFT, 28}, },
			{{-1, ERROR, 24}, {22, SHIFT, 29}, },
			{{-1, REDUCE, 8}, {0, SHIFT, 17}, {1, SHIFT, 18}, {2, SHIFT, 19}, {4, SHIFT, 20}, {37, SHIFT, 21}, },
			{{-1, ERROR, 26}, {37, SHIFT, 31}, },
			{{-1, REDUCE, 4}, {3, SHIFT, 5}, },
			{{-1, ERROR, 28}, {28, SHIFT, 33}, },
			{{-1, ERROR, 29}, {15, SHIFT, 34}, },
			{{-1, ERROR, 30}, {25, SHIFT, 35}, },
			{{-1, ERROR, 31}, {22, SHIFT, 36}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 34}, {20, SHIFT, 37}, },
			{{-1, REDUCE, 4}, {3, SHIFT, 5}, },
			{{-1, REDUCE, 10}, {0, SHIFT, 17}, {1, SHIFT, 18}, {2, SHIFT, 19}, {37, SHIFT, 21}, },
			{{-1, ERROR, 37}, {21, SHIFT, 41}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 39}, {23, SHIFT, 42}, },
			{{-1, ERROR, 40}, {37, SHIFT, 43}, },
			{{-1, ERROR, 41}, {37, SHIFT, 44}, },
			{{-1, ERROR, 42}, {24, SHIFT, 45}, },
			{{-1, REDUCE, 12}, {27, SHIFT, 46}, },
			{{-1, ERROR, 44}, {23, SHIFT, 48}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 46}, {0, SHIFT, 17}, {1, SHIFT, 18}, {2, SHIFT, 19}, {37, SHIFT, 21}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 48}, {24, SHIFT, 51}, },
			{{-1, REDUCE, 14}, {0, SHIFT, 17}, {1, SHIFT, 18}, {2, SHIFT, 19}, {6, SHIFT, 52}, {7, SHIFT, 53}, {16, SHIFT, 54}, {24, SHIFT, 55}, {37, SHIFT, 56}, },
			{{-1, ERROR, 50}, {37, SHIFT, 59}, },
			{{-1, REDUCE, 14}, {6, SHIFT, 52}, {7, SHIFT, 53}, {16, SHIFT, 54}, {24, SHIFT, 55}, {37, SHIFT, 60}, },
			{{-1, ERROR, 52}, {22, SHIFT, 62}, },
			{{-1, ERROR, 53}, {22, SHIFT, 63}, },
			{{-1, ERROR, 54}, {22, SHIFT, 64}, },
			{{-1, REDUCE, 14}, {6, SHIFT, 52}, {7, SHIFT, 53}, {16, SHIFT, 54}, {24, SHIFT, 55}, {37, SHIFT, 60}, },
			{{-1, REDUCE, 24}, {20, SHIFT, 66}, {36, SHIFT, 67}, },
			{{-1, ERROR, 57}, {9, SHIFT, 68}, },
			{{-1, REDUCE, 14}, {6, SHIFT, 52}, {7, SHIFT, 53}, {16, SHIFT, 54}, {24, SHIFT, 55}, {37, SHIFT, 60}, },
			{{-1, REDUCE, 12}, {27, SHIFT, 46}, },
			{{-1, ERROR, 60}, {20, SHIFT, 66}, {36, SHIFT, 67}, },
			{{-1, ERROR, 61}, {25, SHIFT, 71}, },
			{{-1, ERROR, 62}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 63}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 64}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 65}, {25, SHIFT, 89}, },
			{{-1, ERROR, 66}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 67}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 68}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 71}, {25, SHIFT, 93}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 75}, {0, SHIFT, 94}, {37, SHIFT, 95}, },
			{{-1, ERROR, 76}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 77}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 36}, {20, SHIFT, 98}, },
			{{-1, REDUCE, 38}, {26, SHIFT, 99}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 43}, {31, SHIFT, 100}, },
			{{-1, REDUCE, 46}, {29, SHIFT, 101}, {30, SHIFT, 102}, },
			{{-1, REDUCE, 48}, {32, SHIFT, 103}, {33, SHIFT, 104}, },
			{{-1, ERROR, 86}, {23, SHIFT, 105}, {34, SHIFT, 106}, },
			{{-1, ERROR, 87}, {23, SHIFT, 107}, {34, SHIFT, 106}, },
			{{-1, ERROR, 88}, {23, SHIFT, 108}, {34, SHIFT, 106}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 90}, {21, SHIFT, 109}, {34, SHIFT, 106}, },
			{{-1, ERROR, 91}, {28, SHIFT, 110}, {34, SHIFT, 106}, },
			{{-1, ERROR, 92}, {28, SHIFT, 111}, {34, SHIFT, 106}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 94}, {20, SHIFT, 112}, },
			{{-1, ERROR, 95}, {22, SHIFT, 113}, },
			{{-1, ERROR, 96}, {23, SHIFT, 114}, {34, SHIFT, 106}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 98}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 99}, {14, SHIFT, 116}, {37, SHIFT, 117}, },
			{{-1, ERROR, 100}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 101}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 102}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 103}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 104}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 105}, {6, SHIFT, 52}, {7, SHIFT, 53}, {16, SHIFT, 54}, {24, SHIFT, 55}, {37, SHIFT, 60}, },
			{{-1, ERROR, 106}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 107}, {6, SHIFT, 52}, {7, SHIFT, 53}, {16, SHIFT, 54}, {24, SHIFT, 55}, {37, SHIFT, 60}, },
			{{-1, ERROR, 108}, {28, SHIFT, 126}, },
			{{-1, ERROR, 109}, {36, SHIFT, 127}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 111}, {25, SHIFT, 128}, },
			{{-1, ERROR, 112}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 113}, {23, SHIFT, 130}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 115}, {21, SHIFT, 131}, {34, SHIFT, 106}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 117}, {22, SHIFT, 132}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 41}, {31, SHIFT, 100}, },
			{{-1, REDUCE, 42}, {31, SHIFT, 100}, },
			{{-1, REDUCE, 44}, {29, SHIFT, 101}, {30, SHIFT, 102}, },
			{{-1, REDUCE, 45}, {29, SHIFT, 101}, {30, SHIFT, 102}, },
			{{-1, ERROR, 123}, {8, SHIFT, 133}, },
			{{-1, REDUCE, 47}, {32, SHIFT, 103}, {33, SHIFT, 104}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 127}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, REDUCE, 8}, {4, SHIFT, 20}, },
			{{-1, ERROR, 129}, {21, SHIFT, 136}, {34, SHIFT, 106}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 50}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, ERROR, 133}, {6, SHIFT, 52}, {7, SHIFT, 53}, {16, SHIFT, 54}, {24, SHIFT, 55}, {37, SHIFT, 60}, },
			{{-1, ERROR, 134}, {28, SHIFT, 140}, {34, SHIFT, 106}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 52}, {27, SHIFT, 141}, {34, SHIFT, 106}, },
			{{-1, ERROR, 138}, {23, SHIFT, 143}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 141}, {10, SHIFT, 72}, {11, SHIFT, 73}, {12, SHIFT, 74}, {13, SHIFT, 75}, {22, SHIFT, 76}, {35, SHIFT, 77}, {37, SHIFT, 78}, {38, SHIFT, 79}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 52}, {27, SHIFT, 141}, {34, SHIFT, 106}, },
			{{-1, REDUCE, 51}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 6}, {27, 32}, {35, 38}, },
			{{-1, 14}, {16, 25}, {45, 49}, },
			{{-1, 22}, {25, 30}, {128, 135}, },
			{{-1, 39}, },
			{{-1, 47}, {59, 70}, },
			{{-1, 57}, {51, 61}, {55, 65}, {58, 69}, },
			{{-1, 58}, {105, 123}, {107, 125}, {133, 139}, },
			{{-1, 23}, {20, 26}, {36, 40}, {46, 50}, },
			{{-1, 80}, },
			{{-1, 81}, },
			{{-1, 82}, {77, 97}, {100, 118}, },
			{{-1, 83}, {101, 119}, {102, 120}, },
			{{-1, 84}, {103, 121}, {104, 122}, },
			{{-1, 85}, {106, 124}, },
			{{-1, 86}, {63, 87}, {64, 88}, {66, 90}, {67, 91}, {68, 92}, {76, 96}, {98, 115}, {112, 129}, {127, 134}, {132, 137}, {141, 144}, },
			{{-1, 138}, },
			{{-1, 142}, {144, 145}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '{'",
			"expecting: 'public'",
			"expecting: 'extends', '{'",
			"expecting: 'static'",
			"expecting: 'int', intv, 'boolean', 'public', '}', id",
			"expecting: 'void'",
			"expecting: 'main'",
			"expecting: 'int', intv, 'boolean', id",
			"expecting: '}'",
			"expecting: '('",
			"expecting: ';'",
			"expecting: 'String'",
			"expecting: 'int', intv, 'boolean', 'public', 'if', 'while', 'return', 'System.out.println', '{', '}', id",
			"expecting: '['",
			"expecting: 'int', intv, 'boolean', ')', id",
			"expecting: ']'",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: 'int', intv, 'boolean', 'if', 'while', 'return', 'System.out.println', '{', id",
			"expecting: 'if', 'while', 'System.out.println', '{', '}', id",
			"expecting: '[', '=', id",
			"expecting: 'return'",
			"expecting: 'if', 'while', 'return', 'System.out.println', '{', '}', id",
			"expecting: '[', '='",
			"expecting: 'true', 'false', 'this', 'new', '(', '!', id, number",
			"expecting: 'return', '}'",
			"expecting: '[', ']', ')', '.', ',', ';', '+', '-', '*', '>', '<', '&&'",
			"expecting: 'int', id",
			"expecting: ']', ')', '.', ',', ';', '+', '-', '*', '>', '<', '&&'",
			"expecting: ']', ')', ',', ';', '+', '-', '*', '>', '<', '&&'",
			"expecting: ']', ')', ',', ';', '+', '-', '>', '<', '&&'",
			"expecting: ']', ')', ',', ';', '>', '<', '&&'",
			"expecting: ')', '&&'",
			"expecting: 'if', 'while', 'else', 'return', 'System.out.println', '{', '}', id",
			"expecting: ']', '&&'",
			"expecting: ';', '&&'",
			"expecting: 'length', id",
			"expecting: 'if', 'while', 'System.out.println', '{', id",
			"expecting: '='",
			"expecting: 'else'",
			"expecting: 'public', '}'",
			"expecting: 'true', 'false', 'this', 'new', '(', ')', '!', id, number",
			"expecting: ')', ',', '&&'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 2, 5, 6, 7, 1, 8, 9, 4, 8, 10, 8, 1, 1, 1, 11, 1, 12, 1, 13, 8, 1, 3, 14, 15, 12, 13, 2, 16, 17, 3, 18, 19, 2, 20, 1, 1, 4, 21, 20, 22, 11, 20, 4, 22, 1, 23, 13, 13, 13, 23, 24, 25, 26, 21, 27, 12, 28, 28, 28, 12, 28, 28, 28, 29, 20, 12, 30, 30, 30, 31, 28, 28, 30, 30, 30, 32, 33, 33, 34, 35, 36, 36, 36, 37, 38, 39, 39, 3, 17, 13, 36, 33, 28, 40, 28, 28, 28, 28, 28, 41, 28, 41, 14, 42, 37, 12, 28, 20, 30, 38, 30, 13, 33, 33, 33, 34, 34, 43, 35, 37, 37, 28, 44, 38, 30, 30, 45, 41, 39, 12, 32, 46, 20, 37, 37, 28, 20, 30, 46, 20, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
